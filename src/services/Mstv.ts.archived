import { createHash } from "crypto";
import { Logger } from "tslog";

const logger = new Logger();

const specialCharsRegexp = new RegExp(
  "[`~!@#$%^&*()+=|{}':;',\\[\\].<>/?~！@#￥%……&*（）——+|{}【】‘；：”“’。，、？]",
);

/**
 * Find which value of a key contains special keys
 */
const findSpecialKeys = (originObject: Record<string, string>): string[] => {
  let specialChars = [
    "`",
    "~",
    "!",
    "@",
    "#",
    "$",
    "%",
    "^",
    "&",
    "*",
    "(",
    ")",
    "+",
    "=",
    "|",
    "{",
    "}",
    "'",
    ":",
    ";",
    "'",
    ",",
    "[",
    "]",
    ".",
    "<",
    ">",
    "/",
    "?",
    "~",
    "！",
    "@",
    "#",
    "￥",
    "%",
    "…",
    "…",
    "&",
    "*",
    "（",
    "）",
    "—",
    "—",
    "+",
    "|",
    "{",
    "}",
    "【",
    "】",
    "‘",
    "；",
    "：",
    "”",
    "“",
    "’",
    "。",
    "，",
    "、",
    "？",
    '"',
  ];
  let keysToValidate: string[] = [
    "content",
    "deviceName",
    "keyWord",
    "blogBody",
    "blogTitle",
    "getType",
    "responsibilities",
    "street",
    "text",
    "reason",
    "searchvalue",
    "key",
    "answers",
    "leaveReason",
    "personRemark",
    "selfAppraisal",
    "imgUrl",
    "wxname",
    "deviceId",
    "avatarTempPath",
    "file",
    "file",
    "model",
    "brand",
    "system",
    "deviceId",
    "platform",
    "code",
    "openId",
    "unionid",
    "clockDeviceToken",
    "clockDevice",
  ];

  for (let key in originObject) {
    let value: string = originObject[key] || "";
    if (value === "" || value === null) continue;
    // console.info(value);
    value
      .toString()
      .split("")
      .some((char) => {
        if (specialChars.indexOf(char) > -1) {
          if (keysToValidate.indexOf(key) === -1) {
            keysToValidate.push(key);
          }
          return true;
        }
      });
  }

  return keysToValidate;
};

// A list contains endpoint urls should be validated
const endpointUrlsNeedsValidate: string[] = [
  "front/enterprise/loadEnterprise.action",
  "front/post/EnterprisePostLoad.action",
  "helpcenter/video/VideoPlayAuth.action",
  "login/teacher/sendMobileOrEmailCode.action",
  "login/student/sendMobileCode.action",
];

/**
 * Sort objects
 */
const sortObjectKeys = (
  originObject: Record<string, string>,
): Record<string, string> => {
  if (originObject === undefined) return {};

  const sortedKeys = Object.keys(originObject).sort();
  const sortedObjects: Record<string, string> = {};
  for (const key of sortedKeys) {
    sortedObjects[key] = originObject[key];
  }

  return sortedObjects;
};

/**
 * Generate random elements from an array
 */
const randomElements = (array: string[], count: number): string[] => {
  const uniqueCount = Math.min(count, array.length);
  let temporaryArray = array.slice(0);

  for (let i = temporaryArray.length - 1; i > 0; i--) {
    const randomIndex = Math.floor(Math.random() * (i + 1));
    [temporaryArray[i], temporaryArray[randomIndex]] = [
      temporaryArray[randomIndex],
      temporaryArray[i],
    ];
  }

  return temporaryArray.slice(0, uniqueCount);
};

/**
 * Build Token
 */
const buildToken = (
  originObject: Record<string, string>,
): { m: string; t: number; s: string } => {
  const signatureChars = [
    "5",
    "b",
    "f",
    "A",
    "J",
    "Q",
    "g",
    "a",
    "l",
    "p",
    "s",
    "q",
    "H",
    "4",
    "L",
    "Q",
    "g",
    "1",
    "6",
    "Q",
    "Z",
    "v",
    "w",
    "b",
    "c",
    "e",
    "2",
    "2",
    "m",
    "l",
    "E",
    "g",
    "G",
    "H",
    "I",
    "r",
    "o",
    "s",
    "d",
    "5",
    "7",
    "x",
    "t",
    "J",
    "S",
    "T",
    "F",
    "v",
    "w",
    "4",
    "8",
    "9",
    "0",
    "K",
    "E",
    "3",
    "4",
    "0",
    "m",
    "r",
    "i",
    "n",
  ];

  const indexArray: string[] = [];
  for (let i = 0; i < 62; i++) {
    indexArray.push(i.toString());
  }

  const currentTimestamp = Math.round(Date.now() / 1000);
  const randomIndices = randomElements(indexArray, 20);

  let tokenValue = "";
  randomIndices.forEach((index: string) => {
    tokenValue += signatureChars[parseInt(index, 10)];
  });

  const sortedObjects = sortObjectKeys(originObject);

  let filteredValue = "";
  for (const key in sortedObjects) {
    if (
      findSpecialKeys(originObject).indexOf(key) === -1 &&
      !specialCharsRegexp.test(sortedObjects[key]) &&
      sortedObjects[key] != null &&
      sortedObjects[key] !== "" &&
      sortedObjects[key] !== '""'
    ) {
      filteredValue += sortedObjects[key];
    }
  }

  filteredValue += currentTimestamp;
  filteredValue += tokenValue;

  filteredValue = filteredValue
    .replace(/\s+/g, "")
    .replace(/\n+/g, "")
    .replace(/\r+/g, "")
    .replace(/</g, "")
    .replace(/>/g, "")
    .replace(/&/g, "")
    .replace(/-/g, "")
    .replace(/\uD83C[\uDF00-\uDFFF]|\uD83D[\uDC00-\uDE4F]/g, "");

  filteredValue = encodeURIComponent(filteredValue);

  return {
    m: createHash("md5").update(filteredValue).digest("hex"),
    t: currentTimestamp,
    s: randomIndices.length > 0 ? randomIndices.join("_") : "",
  };
};

export const mstv = (originObject: any) => {
  logger.debug({ ...buildToken(originObject), v: "1.6.36" });

  return { ...buildToken(originObject), v: "1.6.36" };
};
